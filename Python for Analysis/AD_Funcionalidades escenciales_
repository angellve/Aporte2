{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Funcionalidades escenciales.","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMyTvHJw7UBP7MDOvLof5zi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"FMrUg0tXEaXP","executionInfo":{"status":"ok","timestamp":1622056278926,"user_tz":-120,"elapsed":755,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}}},"source":["import pandas as pd\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":142},"id":"ZTdFHANfFoZW","executionInfo":{"status":"ok","timestamp":1622056378976,"user_tz":-120,"elapsed":207,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"52c0bae3-a210-4f2b-9414-56f96341dd1d"},"source":["df= pd.DataFrame({'a':[1,2,3], 'b':[4,5,6]})\n","df\n"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>a</th>\n","      <th>b</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   a  b\n","0  1  4\n","1  2  5\n","2  3  6"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KqabKI6HGdrv","executionInfo":{"status":"ok","timestamp":1622056505448,"user_tz":-120,"elapsed":4730,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"5ec87eb9-e624-4b90-cf40-6c786e60f989"},"source":["!pip install wget"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Collecting wget\n","  Downloading https://files.pythonhosted.org/packages/47/6a/62e288da7bcda82b935ff0c6cfe542970f04e29c756b0e147251b2fb251f/wget-3.2.zip\n","Building wheels for collected packages: wget\n","  Building wheel for wget (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for wget: filename=wget-3.2-cp37-none-any.whl size=9681 sha256=843cb4c8b8767e83ceb92a7d100110ce1f34246233e8ef22ce90b5f7ca8166ca\n","  Stored in directory: /root/.cache/pip/wheels/40/15/30/7d8f7cea2902b4db79e3fea550d7d7b85ecb27ef992b618f3f\n","Successfully built wget\n","Installing collected packages: wget\n","Successfully installed wget-3.2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"8wLr2jpJGERf","executionInfo":{"status":"ok","timestamp":1622056605629,"user_tz":-120,"elapsed":2856,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"c41290f3-b1ab-4f85-e668-b9eb7c334e71"},"source":["import wget\n","\n","# descargar datos\n","url = 'https://mymldatasets.s3.eu-de.cloud-object-storage.appdomain.cloud/ml-1m.zip'\n","wget.download(url)"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'ml-1m (1).zip'"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"vex9Scj7GNai","executionInfo":{"status":"ok","timestamp":1622056883177,"user_tz":-120,"elapsed":230,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}}},"source":["import zipfile\n","###extrayendo datos\n","with zipfile.ZipFile('ml-1m.zip','r') as zip_ref:\n","  zip_ref.extractall()"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vk20mJV8Gmih","executionInfo":{"status":"ok","timestamp":1622056884627,"user_tz":-120,"elapsed":6,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"d8dcf542-50e5-48e8-de9b-a62a47331d92"},"source":["import os\n","\n","os.listdir('ml-1m')"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['users.dat', 'movies.dat', 'ratings.dat', 'README']"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":258},"id":"JwfzkwFBICzo","executionInfo":{"status":"ok","timestamp":1622057202171,"user_tz":-120,"elapsed":196,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"c82d3cc6-7593-4853-9118-aa45fe27d5a3"},"source":["unames = ['user_id','gender','age','occupation','zip']\n","users= pd.read_table('ml-1m/users.dat',sep='::',header=None,names=unames)\n","users.head()"],"execution_count":17,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py:767: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n","  return read_csv(**locals())\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>occupation</th>\n","      <th>zip</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>F</td>\n","      <td>1</td>\n","      <td>10</td>\n","      <td>48067</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>M</td>\n","      <td>56</td>\n","      <td>16</td>\n","      <td>70072</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>M</td>\n","      <td>25</td>\n","      <td>15</td>\n","      <td>55117</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>M</td>\n","      <td>45</td>\n","      <td>7</td>\n","      <td>02460</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>M</td>\n","      <td>25</td>\n","      <td>20</td>\n","      <td>55455</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user_id gender  age  occupation    zip\n","0        1      F    1          10  48067\n","1        2      M   56          16  70072\n","2        3      M   25          15  55117\n","3        4      M   45           7  02460\n","4        5      M   25          20  55455"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":258},"id":"BVWYhyP-JWIk","executionInfo":{"status":"ok","timestamp":1622057535732,"user_tz":-120,"elapsed":223,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"558b50ed-e1ce-4b2a-e883-fabf63bf2dac"},"source":["mnames = ['user_id','movie_id','ranting','timestamp']\n","movies= pd.read_table('ml-1m/movies.dat',sep='::',header=None,names=unames)\n","movies.head()"],"execution_count":23,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py:767: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n","  return read_csv(**locals())\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>movie_id</th>\n","      <th>ranting</th>\n","      <th>timestamp</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>Toy Story (1995)</td>\n","      <td>Animation|Children's|Comedy</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>Jumanji (1995)</td>\n","      <td>Adventure|Children's|Fantasy</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Grumpier Old Men (1995)</td>\n","      <td>Comedy|Romance</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>Waiting to Exhale (1995)</td>\n","      <td>Comedy|Drama</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>Father of the Bride Part II (1995)</td>\n","      <td>Comedy</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user_id  ... timestamp\n","0        1  ...       NaN\n","1        2  ...       NaN\n","2        3  ...       NaN\n","3        4  ...       NaN\n","4        5  ...       NaN\n","\n","[5 rows x 4 columns]"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":258},"id":"wS7ECUVvJef_","executionInfo":{"status":"ok","timestamp":1622057638556,"user_tz":-120,"elapsed":4940,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"3d5c2d39-21bf-42c7-9e74-7994541735a5"},"source":["runames = ['user_id','movie_id','rating','timestamp']\n","ratings= pd.read_table('ml-1m/ratings.dat',sep='::',header=None,names=unames)\n","ratings.head()"],"execution_count":27,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py:767: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n","  return read_csv(**locals())\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>movie_id</th>\n","      <th>ranting</th>\n","      <th>timestamp</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1193</td>\n","      <td>5</td>\n","      <td>978300760</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>661</td>\n","      <td>3</td>\n","      <td>978302109</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>914</td>\n","      <td>3</td>\n","      <td>978301968</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>3408</td>\n","      <td>4</td>\n","      <td>978300275</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>2355</td>\n","      <td>5</td>\n","      <td>978824291</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   user_id  movie_id  ranting  timestamp\n","0        1      1193        5  978300760\n","1        1       661        3  978302109\n","2        1       914        3  978301968\n","3        1      3408        4  978300275\n","4        1      2355        5  978824291"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"Jatv2HqVK9q_","executionInfo":{"status":"ok","timestamp":1622057749593,"user_tz":-120,"elapsed":200,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}}},"source":["###guadar en un archivo csv\n","movies.to_csv('movies.csv',index=False)"],"execution_count":28,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":376},"id":"t6aVIS9ALOrP","executionInfo":{"status":"error","timestamp":1622057854907,"user_tz":-120,"elapsed":179,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"894e5ba2-e10c-45d6-e58a-2401240a2d26"},"source":["#### juntando la data no me la junta __________________investigar\n","data = pd.merge(pd.merge(ratings, users), movies)\n","data.head()"],"execution_count":31,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-31-7305a242637e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mratings\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0musers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmovies\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36mmerge\u001b[0;34m(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[1;32m     85\u001b[0m         \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     86\u001b[0m         \u001b[0mindicator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindicator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 87\u001b[0;31m         \u001b[0mvalidate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalidate\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     88\u001b[0m     )\n\u001b[1;32m     89\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, left, right, how, on, left_on, right_on, axis, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[1;32m    654\u001b[0m         \u001b[0;31m# validate the merge keys dtypes. We may need to coerce\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    655\u001b[0m         \u001b[0;31m# to avoid incompatible dtypes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 656\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_coerce_merge_keys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    657\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    658\u001b[0m         \u001b[0;31m# If argument passed to validate,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m_maybe_coerce_merge_keys\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1163\u001b[0m                     \u001b[0minferred_right\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstring_types\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0minferred_left\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstring_types\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1164\u001b[0m                 ):\n\u001b[0;32m-> 1165\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1166\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1167\u001b[0m             \u001b[0;31m# datetimelikes must match exactly\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: You are trying to merge on int64 and object columns. If you wish to proceed you should use pd.concat"]}]},{"cell_type":"code","metadata":{"id":"pepfXqljLvXL"},"source":["#numero de filas y columnas\n","\n","data.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xpzmu1WMMNDa"},"source":["#nombres de las columnas\n","data.columns()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RKweF76FMX2g"},"source":["#informacion general\n","data.info()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LW7iZnpcJ8H7"},"source":["#describe\n","data.describe()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"b2-gKYiaMoTh"},"source":["#####agrupar datos\n","\n","data_title=data.groupby('title')\n","data_title.size()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iOCPeDO1MzKN"},"source":["#### funcion pivot table \n","mean_ratings = data.pivot_table('rating', index='title', columns='gender', aggfunc='mean')\n","mean_ratings.sample(5)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hPmc9KPANLXm"},"source":["#####filtradooooo\n","ratings_by_title = data.groupby('title').size()\n","active_titles = rangs_by_title.index[ratings_by_title >= 250]\n","active_titles\n","##sacando los indices\n","\n","#ahora con iloc leyendo\n","mean_ratings_250 = mean_ratings.iloc[active_titles]\n","mean_rantings_250.sample(5)\n","\n","# se que da con las pelicuals que tenga mas de 250 datos\n","\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LfbU2Z4UOiwb"},"source":["######ordenasr datos\n","\n","top_dfemale_ratings = mean_ratings_250.sort_values(by='F',ascending=False)\n","top_female_ratings.head()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":142},"id":"u-t9mz33O5cM","executionInfo":{"status":"ok","timestamp":1622058775695,"user_tz":-120,"elapsed":205,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"1ec08a1c-0581-4368-bef2-f271efb5361d"},"source":["###########TRATAR DATOS AUSENTE###########\n","df = pd.DataFrame({\n","    \"weight\": {\"alice\":68, \"charles\": 112},\n","    \"height\": {\"bob\": 168, \"charles\": 182}\n","})\n","\n","df\n","\n"],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>weight</th>\n","      <th>height</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>alice</th>\n","      <td>68.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>charles</th>\n","      <td>112.0</td>\n","      <td>182.0</td>\n","    </tr>\n","    <tr>\n","      <th>bob</th>\n","      <td>NaN</td>\n","      <td>168.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         weight  height\n","alice      68.0     NaN\n","charles   112.0   182.0\n","bob         NaN   168.0"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"w_G6Is_dPMKM"},"source":["##########cuantos valores tienen el na\n","\n","df.isna()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":142},"id":"HODfiH91PQwB","executionInfo":{"status":"ok","timestamp":1622058807288,"user_tz":-120,"elapsed":196,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"cce0a031-b993-4526-cdc4-9f157c6d64fb"},"source":["df.isna()"],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>weight</th>\n","      <th>height</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>alice</th>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>charles</th>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>bob</th>\n","      <td>True</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         weight  height\n","alice     False    True\n","charles   False   False\n","bob        True   False"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Aa-axXg4PUGN","executionInfo":{"status":"ok","timestamp":1622058859510,"user_tz":-120,"elapsed":192,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"f5e49a18-6aef-4908-a382-ef179a9fa487"},"source":["###### valores ausente por columnas\n","df.isna().sum()\n"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["weight    1\n","height    1\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4SYKIFNRPajb","executionInfo":{"status":"ok","timestamp":1622058880105,"user_tz":-120,"elapsed":204,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"fca6416c-5225-4045-d041-bafe3e01f3c6"},"source":["##### valores ausentes por filas\n","df.isna().sum(axis=1)"],"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["alice      1\n","charles    0\n","bob        1\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":142},"id":"xSon-cmyPlkh","executionInfo":{"status":"ok","timestamp":1622058934368,"user_tz":-120,"elapsed":377,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"cf74edd6-a4df-4adc-af7e-eb4719db9fb4"},"source":["#reemplazar NANM por 0\n","\n","\n","df.fillna(0)"],"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>weight</th>\n","      <th>height</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>alice</th>\n","      <td>68.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>charles</th>\n","      <td>112.0</td>\n","      <td>182.0</td>\n","    </tr>\n","    <tr>\n","      <th>bob</th>\n","      <td>0.0</td>\n","      <td>168.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         weight  height\n","alice      68.0     0.0\n","charles   112.0   182.0\n","bob         0.0   168.0"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":142},"id":"u9FtqjIEP3Ka","executionInfo":{"status":"ok","timestamp":1622058973928,"user_tz":-120,"elapsed":323,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"9b585561-b13a-4139-a966-f0ddc090e39b"},"source":["####reemplazar nana po el valor medio de la columna\n","df.fillna(df.mean())"],"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>weight</th>\n","      <th>height</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>alice</th>\n","      <td>68.0</td>\n","      <td>175.0</td>\n","    </tr>\n","    <tr>\n","      <th>charles</th>\n","      <td>112.0</td>\n","      <td>182.0</td>\n","    </tr>\n","    <tr>\n","      <th>bob</th>\n","      <td>90.0</td>\n","      <td>168.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         weight  height\n","alice      68.0   175.0\n","charles   112.0   182.0\n","bob        90.0   168.0"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"Syip72N1P8bg","executionInfo":{"status":"ok","timestamp":1622059071294,"user_tz":-120,"elapsed":205,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"6348d5e2-b961-4b49-a746-f92605a5a16c"},"source":["### elimina todas las filas con algun valor NAN\n","\n","df.dropna()"],"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>weight</th>\n","      <th>height</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>charles</th>\n","      <td>112.0</td>\n","      <td>182.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         weight  height\n","charles   112.0   182.0"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":142},"id":"HvGdvHkRQLI9","executionInfo":{"status":"ok","timestamp":1622059073241,"user_tz":-120,"elapsed":263,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"61ea7a09-8185-428a-cdff-6f12493d589c"},"source":["####elimina todas las filas con todos los calores en NAN\n","df.dropna(how='all') "],"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>weight</th>\n","      <th>height</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>alice</th>\n","      <td>68.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>charles</th>\n","      <td>112.0</td>\n","      <td>182.0</td>\n","    </tr>\n","    <tr>\n","      <th>bob</th>\n","      <td>NaN</td>\n","      <td>168.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         weight  height\n","alice      68.0     NaN\n","charles   112.0   182.0\n","bob         NaN   168.0"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":125},"id":"fPoYZ0RAQUU-","executionInfo":{"status":"ok","timestamp":1622059097767,"user_tz":-120,"elapsed":223,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"2fe09f77-7102-4997-f21b-4b43d27883e9"},"source":["### eliminar todas las columnas con algul calor de nandn\n","df.dropna(axis=1)"],"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>alice</th>\n","    </tr>\n","    <tr>\n","      <th>charles</th>\n","    </tr>\n","    <tr>\n","      <th>bob</th>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["Empty DataFrame\n","Columns: []\n","Index: [alice, charles, bob]"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":142},"id":"LV1LxEVUQaXY","executionInfo":{"status":"ok","timestamp":1622059139788,"user_tz":-120,"elapsed":328,"user":{"displayName":"Angel Bastardo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiH1A7RLKmdDFBgrDEfRZ8sv-hvg3ZzdLm7SJ7R=s64","userId":"18298668320349427837"}},"outputId":"2e796eca-c89a-4b9d-c4ae-3aa7b2d4bde4"},"source":["### elimina todas las columnas con todos los calores en NANA\n","df.dropna(axis=1,how='all')"],"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>weight</th>\n","      <th>height</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>alice</th>\n","      <td>68.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>charles</th>\n","      <td>112.0</td>\n","      <td>182.0</td>\n","    </tr>\n","    <tr>\n","      <th>bob</th>\n","      <td>NaN</td>\n","      <td>168.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         weight  height\n","alice      68.0     NaN\n","charles   112.0   182.0\n","bob         NaN   168.0"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"code","metadata":{"id":"D17hSjvDQk37"},"source":[""],"execution_count":null,"outputs":[]}]}